0. https://www.toptal.com/developers/gitignore
입력 키워드 : java eclipse maven

===========================파일 내용 ==========================================

# Created by https://www.toptal.com/developers/gitignore/api/java,eclipse,maven
# Edit at https://www.toptal.com/developers/gitignore?templates=java,eclipse,maven

### Eclipse ###
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# PyDev specific (Python IDE for Eclipse)
*.pydevproject

# CDT-specific (C/C++ Development Tooling)
.cproject

# CDT- autotools
.autotools

# Java annotation processor (APT)
.factorypath

# PDT-specific (PHP Development Tools)
.buildpath

# sbteclipse plugin
.target

# Tern plugin
.tern-project

# TeXlipse plugin
.texlipse

# STS (Spring Tool Suite)
.springBeans

# Code Recommenders
.recommenders/

# Annotation Processing
.apt_generated/
.apt_generated_test/

# Scala IDE specific (Scala & Java development for Eclipse)
.cache-main
.scala_dependencies
.worksheet

# Uncomment this line if you wish to ignore the project description file.
# Typically, this file would be tracked if it contains build/dependency configurations:
#.project

### Eclipse Patch ###
# Spring Boot Tooling
.sts4-cache/

### Java ###
# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

### Maven ###
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
# https://github.com/takari/maven-wrapper#usage-without-binary-jar
.mvn/wrapper/maven-wrapper.jar
.flattened-pom.xml

# End of https://www.toptal.com/developers/gitignore/api/java,eclipse,maven
==========================================================================================================
   
1. github.com 회원가입
   username과 비번 기억하기

2. 로그인


3. *****  원격 저장소 생성 ******
   https://github.com/new

   Repository name : study

   Initialize this repository with:
   Add .gitignore 에서 
      .gitignore template:Java 선택 

   Create repository 버튼 클릭

   결과)
   repository study 생성후 웹 주소
    =>  https://github.com/자신의username/study
   

   저장소 주소 복사를 위해 Code 버튼 클릭 -> 저장 버튼 아이콘 클릭
   https://github.com/자신의username/study.git

  
4.*****  지역 저장소 생성 ****** 
   1) sts에서 Perspective 변경하기(Git Perspective)
       Window > Perspective > Open Perspective > Other -> Git 

   2) Clone a Git repository 클릭
      
      -> Clone URI -> Next -> URI : 3에서 복사한 주소를 붙여넣기
          URI :  https://github.com/username/study.git
          Host : github.com
          Repository path : /username/study.git
      -> Next  -> Next
           Directory : C:\Users\사용자계정\git\study
           Remote name:origin
      -> Finish
   
    
  
5. 프로젝트 생성
    1) Spring  Perspective 이동
       Window > Perspective > Open Perspective > Other -> Spring 
    2) Spring Legacy Project 생성
       File -> New ->  Spring Legacy Project 
       ->  프로젝트 이름 : GitTest  
       -> Spring MVC Project -> Next -> com.hta.test -> Finish





6. 프로젝트 지역 저장소 업로드
   1) 프로젝트에서 마우스 우클릭으로 Team > Share Project
   2) Configure Git Repository에서 
      Repository : study-C:\Users\사용자계정\git\study\.git 
      Working tree: C:\Users\사용자계정\git\study
   3) Finish
  
    ?는 새로 생성된  파일입니다.
     
7. 프로젝트 원격 저장소로 업로드
    프로젝트 파일 중에서 내가 올리고자 하는 파일을 선택한 후 커밋합니다.
    이때 선택한 파일들은 index 또는 staging area에 올려놓습니다. 
    인덱스에 파일 상태를 기록하는 것을 스테이징이라고 합니다.

   1) 프로젝트에서 마우스 우클릭으로 Team > Commit

     Unstage : 수정된 모든 파일들의 목록들이 표시되는 공간
     stage : commit시 만들어질 버전에 합류할 파일들만 모아놓은 공간

   2) Unstaged Changes
      + : Add Selected files 
      ++ : Add all files
      ++ 클릭 -> 모든 파일 Staged Changes로 이동
      

   3) Commit Message
      1. 프로젝트 생성 (입력)

   4) Commit and Push -> Next -> Finish
      설명) Commit(파일 및 폴더의 추가/변경 사항을 저장소에 기록)
            push(웹 상의 원격 저장소로 변경된 파일을 업로드하는 것)

   5) Close

8. https://github.com/username/study 접속 후 변경사항 확인 
  

==============================================================================
*****     지역에 새로운 브랜치를 만들어 작업 후 원격의 새로운 브랜치에 저장하기 
         (지역 test_branch에서 원격 test_branch로 저장)    ******
브랜치란 '나무가지'란 뜻으로, 만들어 놓은 버전(main)의 복사본(branch)을 만들어 
다른 방향으로 작업을 이어나가는 것입니다.

1. 새로운 브랜치 생성
   sts에서
   1) 프로젝트 우클릭 Team > Switch To > New Branch
   2) Create a new branch에서
      Branch name : test_branch
      체크 - Check out new branch : 새로운 브랜치로 이동해라
   3) Finish
   4) GitTest[study test_branch]로 변경
 

2. 새로운 브랜치에서 파일 생성 후 지역 저장소 및 원격 저장소 저장하기
   1) views 폴더에서 New -> Other -> JSP File -> test.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
   <head>
           <title>Insert title here</title>
   </head>
   <body>
          <h1> test.jsp입니다.</h1>
   </body>
</html>
    
     test.jsp파일에 ?가 생깁니다.

   2) 프로젝트에서 마우스 우클릭으로 Team > Commit
      Unstaged Changes에서 test.jsp를 Staged Changes에 add 합니다.
       => + 클릭

   3) Commit Message
       2. test_branch에서 test.jsp를 작성합니다.
         
    4) Commit and Push 
       Remote : origin
       Branch : test_branch
       => 원격의 test_branch로 Push합니다.
       ->Next  

    5) Finish

    6) Close

3. https://github.com/username/study 접속 후 변경사항 확인 
    1) Branch는 test_branch를 확인
    2) https://github.com/username/study/tree/test_branch
    3) GitTest 클릭 -> src/main/webapp/WEB-INF/views/test.jsp로 이동

  또는 https://github.com/username/study/blob/test_branch/GitTest/src/main/webapp/WEB-INF/views/test.jsp
==============================================================================================================
***** 원격 test_branch의 변경된 내용을 원격 main 브랜치로 저장하기(origin/test_branch => origin/main) *****
1. 원격의 main branch 선택
   https://github.com/username/study/ 접속해서 
   GitTest/src/main/webapp/WEB-INF/views에 test.jsp가 존재하는지 확인합니다.
    또는 
    https://github.com/username/study/tree/main/GitTest/src/main/webapp/WEB-INF/views 
    test.jsp가 존재하는지 확인 합니다. 
    -> 존재하지 않습니다.

2.  https://github.com/username/study/에서  Branch를 test_branch로 변경
     또는
     https://github.com/username/study/tree/test_branch
    
3.  pull request(원격의 main branch로 머지할 때 사용하는 단어) 버튼 클릭합니다.
   (main branch에 저장하기 위해 main과 test_branch 를 비교하고 저장할 수 있도록 요청합니다.)   
   충돌이 발생하지 않으면  Able to merge. 메시지가 나타납니다.

4. Open a pull request
    1) Write 탭에서 아래와 같이 작성합니다.
        3.test_branch에서 main로 request pull 합니다.

    2) Create pull request 클릭

5. https://github.com/username/study/pull/1
    1) Merge pull request 클릭 (main branch와 머지 할 수 있는 명령)
    2) Confirm merge (머지하는 것을 확인합니다.)

6.  https://github.com/username/study
     Branch:main에서 test.jsp가 추가 되었는지 확인합니다. 
    또는
    https://github.com/username/study/blob/test_branch/GitTest/src/main/webapp/WEB-INF/views/test.jsp
===============================================================================================================
***** origin/main의 내용이 바뀐 경우 로컬의 test_branch에서 적용하기 *****

1. 깃에서 main branch 선택합니다. (https://github.com/username/study)
2. GitTest 클릭(https://github.com/username/study/tree/main/GitTest)
3. study/GitTest/에서
   Add file ->  Create new file 클릭

2. study/GitTest/m.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<title>Insert title here</title>
</head>
<body>
  <h1>m.jsp입니다.</h1>
</body>
</html>

3. Commit new file 
    ->  Create m.jsp  : m.jsp 생성(입력)
    ->  Add an optional extended discription.. : 4. main에서 m.jsp 생성합니다.(입력)
    -> Commit new file 클릭

4. sts에서    GitTest[study test_branch]
     프로젝트에서 마우스 우클릭으로 Team > pull,, -> Reference에서 Ctrl + Space
    -> main 선택
        Reference: refs/heads/main 선택

5. sts에서 GitTest[study test_branch 윗화살표2] : 올릴내용이 2개존재
====================================================================================
 ***** m.jsp 수정하기 *****
 
1.sts에서    GitTest[study test_branch]
   m.jsp 내용 변경
  <body>
  <h1>m.jsp입니다.</h1>
  <h2>local-1</h2>
</body>

2. Commit and Push
    1)  프로젝트에서 마우스 우클릭으로 Team > Commit
      Unstaged Change에서 m.jsp를 Staged Changes에 add 합니다.
       => + 클릭

    2) Commit Message에서 
       5. 로컬 test_branch에서 m.jsp 내용 수정합니다.

    3) Commit and Push

3. https://github.com/username/study/blob/test_branch/GitTest/m.jsp
    바뀐 내용 확인

====================================================================================
원격 test_branch => 원격 main으로 Merge

1. https://github.com/username/study/tree/test_branch
   Pull request 클릭

2. https://github.com/username/study/compare/test2_branch?expand=1
    -> Write 탭 
        Leave a comment : 5.  로컬 test_branch에서 m.jsp 내용 수정했습니다. (입력)
    -> Create pull request 클릭
    
3. https://github.com/username/study/pull/2
    -> Merge pull request

4. Confirm merge


====================================================================================
 ********** 로컬 충돌 **************************
원격 test_branch와 원격 main, 로컬 test_branch 내용 일치
원격 main branch 수정 
로컬 test_branch 수정 -> 커밋 and push 
로컬 test_branch에서 pull.. => 충돌발생

1) 원격 test_branch와 원격 main, 로컬 test_branch 내용 일치 확인
2) 원격 main branch 수정
 <%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<title>Insert title here</title>
</head>
<body>
  <h1>m.jsp입니다.</h1>
  <h2>local-2</h2>
</body>
</html>

3) 로컬 test_branch 변경
<%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<title>Insert title here</title>
</head>
<body>
  <h1>m.jsp입니다.</h1>
  <h2>local-3</h2>
</body>
</html>

4) 로컬 test_branch 수정 -> 
   Commit Message : 1-> 3으로 변경
   커밋 and push 

5) 로컬 test_branch에서 pull.. => Reference : refs/heads/main  충돌발생
   
<%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<title>Insert title here</title>
</head>
<body>
  <h1>m.jsp입니다.</h1>
<<<<<<< HEAD
  <h2>local-3</h2>
=======
  <h2>local-2</h2>
>>>>>>> branch 'main' of https://github.com/study-spring/study.git
</body>
</html>

***** 현재 작업 중인 브랜치를 가리키는 HEAD *****


6) 충돌된 파일 수정
<%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<title>Insert title here</title>
</head>
<body>
  <h1>m.jsp입니다.</h1>
  <h2>local-7</h2>
</html>

7) 다이아몬드 아이콘(충돌표시) m.jsp를 
   커밋 메시지 : 충돌 1->3->7
   commit and push

*******************************충돌 ********************
원격 충돌나는 경우
1. 원격 test_branch는 로컬에서 변경 사항 적용됨   

2. 원격 test_branch의 변경을 원격에 적용하지 않은 상태에서 원격 main 수정
   <h2>local-2</h2>
  -> <h2>local-10</h2>

3. 원격 test_branch -> 원격 main  pull request 클릭하는 경우 충돌 발생

4. Create pull request 클릭

5. Resolve conflicts 클릭
6. 
<%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<title>Insert title here</title>
</head>
<body>
  <h1>m.jsp입니다.</h1>
<<<<<<< test_branch
  <h2>local-7</h2>
=======
  <h2>local-10</h2>
>>>>>>> main
</body>
</html>

7. 수정합니다.

8.   Mark as resolved 클릭 (충돌 부분 해결했다고 알려줍니다.)

9.    Commit merge 클릭

10.   Merge pull request 클릭

11.    Confirm merge 클릭 

12.   수정내용 처럼 변경되었는지 아래에서 확인
       https://github.com/username/study/blob/test_branch/GitTest/m.jsp
       https://github.com/username/study/blob/main/GitTest/m.jsp
================================================================================
깃허브에 있는 프로젝트 =>  sts에서 프로젝트로 만들기
*****  지역 저장소 생성 ****** 
      sts에서 
   1) Window > Perspective > Open Perspective > Other -> Git 

   2) Clone a Git repository 클릭
      -> Clone URI
      -> URI에서 https://github.com/username/study.git 붙여넣기
      -> Next : mastr
     -> Next : 
           Directory : C:\Users\사용자계정\git\study
           Projects
              import all existing Eclipse projects after clone finishes 체크
      -> Finish
 

====================================================================================
